<h3>(promise videos)</h3>

<script src="/js/overlayGen.js"></script>
<script src="/js/pingerTool.js"></script>



<button id="button" class="btn btn-success"> create a balloon </button>

<div id="resultDiv"></div>

<div class="balloon"></div>


<script>

    var button = document.getElementById('button');
    var resultDiv = document.getElementById('resultDiv');

    // -- ONLOAD --
    window.addEventListener('load', function(e){

        loader.loadImage('/vectors/balloon.svg');

    });

    // create a balloon
    button.addEventListener('click', function(e){
        createBalloon();
    });



    // ======================================
    // BALLOON PLAY =========================

    //temp function
    function createBalloon() {
        // find the size of the window
        var windowWidth = window.innerWidth;
        var windowHeight = window.innerHeight;

        console.log('Current window size ' + windowWidth + ' x ' + windowHeight);

        //temporarily create balloon centered at the extremities

        var balloon1 = document.createElement('div');
        balloon1.src = '/vectors/balloon.svg';
        balloon1.id = 'balloon1';

        balloon1.classList.add('balloon');
        balloon1.style.top = (windowHeight) + 'px';

        document.body.appendChild(balloon1);
    }


    //TODO: CONTINUE WORKING ON THIS.








    // BALOON PLAY =========================
    // =====================================



    // ================================================
    // LOADER =========================================

    // TODO: method to spawn single veil versus one-per-file load.

    var loader = {
        loaded: true,
        loadedCount: 0,
        totalCount: 0,

        init: function(){},

        loadImage: function(url){

            console.log(url + ' loading.');

            this.totalCount++;
            this.loaded = false;
            var image = new Image();
            image.src = url;
            image.onload = loader.itemLoaded;
            return image;
        },

        itemLoaded: function(){
            loader.loadedCount++;

            if(loader.loadedCount === loader.totalCount){
                //load is fully loaded...
                loader.loaded = true;
                // hide the load screen.
                // and call the loader.onload method if it exists (why?)
                if(loader.onload) {
                    loader.onload();
                    loader.onload = undefined;  //use and reset(?)
                }
            }
        },

        onload: function(){
            console.log('Everything has loaded, callback firing!');
            //init();
        }
    };


    // =================
    // FUNCTIONS =======

    function init() {

        // -- variables --
        var button = document.getElementsByTagName('button')[0];
        var resultDiv = document.getElementById('resultDiv');

        // button event listener
        button.addEventListener('click', function(e){
            resultDiv.innerHTML = '';

            var aButton = new Button('android', '/veedeeoh', resultDiv);
            var bButton = new Button('apple', '/veedeeoh', resultDiv);
            var cButton = new Button('OSX', '/veedeeoh', resultDiv);

            aButton.createButton();
            bButton.createButton();
            cButton.createButton();

        });

        console.log('App initialized.');
    }

    //PROCESS DATA
    function processData(dataObject){

        switch(dataObject.status){
            case 'completed':
                console.log(dataObject.payload.videoUrl);
                resultDiv.innerHTML = dataObject.payload.videoUrl;
                break;
            case 'rejected':
                console.log(dataObject.payload.rejectedArr);
                    resultDiv.innerHTML = dataObject.payload.rejectedArr;
                break;
            default:
                console.log('Invalid data, defaulting.');
        }
    }

    // =================
    // CONSTRUCTORS ====


    /**
     * Button Constructor.
     * @param name  Name of the button.
     * @param url   Route to AJAX.
     * @param rDiv  Result Div to populate.
     * @constructor
     */
    var Button = function(name, url, rDiv) {

        this.createButton = function() {

            var button = document.createElement('button');
            var buttonText = document.createTextNode(name+ ' button');
            button.classList.add('btn');
            button.classList.add('btn-primary');
            button.classList.add('buttonSpace');

            button.appendChild(buttonText);
            rDiv.appendChild(button);

            button.addEventListener('click', function(e){

                console.log(name + ' button pressed.');
                pingerTool.pingStart();
                overlayGen.createNamedWaitOverlay('loading...');

                $.ajax({
                    url: url,
                    method: 'GET',
                    success: function(data, status, jqXHR) {
                        overlayGen.removeWaitOverlay();
                        console.log(data);
                        processData(data);
                        pingerTool.pingEnd();

                    },
                    error: function(jqXHR, status, err) {
                        console.log(err);
                    }
                });
            });
        };

        console.log(name + ' button was created. ');
    };



</script>